EUREKA SERVER

Nos permite tanto el registro como la localizacion de las instancias de nuestros micreoservicios que estan corriendo.
Cada instancia de micro-servicio utilizando eureka-client notifica su estado al eureka-server y esto la hace cada 30 segundos.
Tambien cada cliente cachea una copia de registro de eureka server para saber cuales son los microservicios que estan ejecutandose en el eureka-server.
Eureka-server entra en modo self-preservation cuando el numero de microservicios registrados no notifican su estado de salud al eureka server es decir cuando pasan un umbral del numero de microservicios que no notifican a eureka-server, este determina que hay un problema en la red entonces entra en modo self-preservation.
Ahora en nuestro servicio de registerService (EUREKA SERVER)para que nuestros microservicios cuando aranque se registren en un servicio centralizado, para que despues cuando nuestros clientes quieran acceder a ellos puedan ser descubiertos a traves de register-service.

Dependencias a usar: Eureka-Server, Config-Client

1. Lo primero es decorar nuestra clase principal con la notacion: @EnableEurekaServer
2. Procedemos a crear las configuraciones de eureka-server las cuales la vamos a registrar en la carpeta de configuracion de todos nuestros microservicios en "config-data", ahi creamos nuestro archivo de configuracion de eureka-server, que se llamara: "registryService", y colocamos este codigo: 

server:
  port: 8099

eureka:
  instance:
    hostname: localhost
  client:
    registerWithEureka: false
    fetchRegistry: false
    serviceUrl:
      defaultZone: http://${eureka.instance.hostname}:${server.port}/eureka/

con esto estamos definiendo donde va a estar escuchando eureka-server las peticiones y los registros de nuestros microservicios.

3. Cada vez que actualizemos el config-data tenemos que actualizar dichos cambios en el repositorio para nuestro configService lo pueda reconocer.

4. Probamos en POSTMAN que traiga nuestro archivo de configuracion al llamar a la ruta: http://root:s3cr3t@localhost:8081/registryService/default.

5. Ahora vamos a nuestra aplicacion "registerService" y hacemos lo mismo que con los microservicios: modificamos el "application.properties" a "bootstrap.yml" y le pasamos el siguiente codigo para poder acceder al configService: 

spring:
  application:
    name: registryService
  cloud:
    config:
      uri: http://localhost:8081
      username: root
      password: s3cr3t

recordemos que la dependencia de: 
implementation 'org.springframework.cloud:spring-cloud-starter-config'
ya esta habilitado en este caso


6. Comprobamos que tengamos acceso al servicio en: http://localhost:8099/

7. Lo que haremos ahora es conectar cada uno de nuestros microservicios a EUREKA SERVER

	7.1 Nos dirigimos al config-data de cada uno de nuestros microservicios y accedemos a la configuracion de cada microservicio y agregamos lo siguiente, para que se puedan conectar a EUREKA-SERVER:

	eureka:
  client:
    serviceUrl:
      defaultZone: http://localhost:8099/eureka/

Esto se repite para la el archivo de configuracion de cada microservicio

8. Actualizamos nuestro repositorio para que nuestro configService pueda acceder a dichas configuraciones

9. Verificamos en POSTMAN: http://root:s3cr3t@localhost:8081/customerService/default que aparezca la configuracion de EUREKA CLIENT: "eureka.client.serviceUrl.defaultZone": "http://localhost:8099/eureka/"

10. Ahora vamos a customerService para configurar que trabaje con eurekaClient:

	10.1 Habilitamos la dependencia de EUREKA-CLIENT:
	implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'

	10.2 Seguidamente marcamos la clase principal de "customerService" como:
	@EnableEurekaClient y ejecutamos nuestra aplicacion, 

	10.3 Verificamos que se haiga registra en nuestro EUREKA en nuestro: http://localhost:8099/eureka/ 




